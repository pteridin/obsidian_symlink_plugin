/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SymlinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var os = __toESM(require("os"));
var fs = __toESM(require("fs"));
var import_path = require("path");
var DEFAULT_SETTINGS = {
  defaultTargetPath: ""
};
var SymlinkPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "create-symlink",
      name: "Create Symlink to Folder",
      callback: () => this.createSymlink()
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async createSymlink() {
    new SymlinkInputModal(this.app, (source, target, linkType) => {
      const platform2 = os.platform();
      if (!fs.existsSync(source)) {
        new import_obsidian.Notice(
          "Source path does not exist. Please ensure it does. Symlinks cannot be created if the source path does not exist."
        );
        return;
      }
      const targetPath = this.extendActivePath(target);
      if (fs.existsSync(targetPath)) {
        new import_obsidian.Notice(
          "Target path exist. Please ensure it does not. Symlinks cannot be created if the target path already exists."
        );
        return;
      }
      let command = "";
      switch (platform2) {
        case "win32":
          switch (linkType) {
            case "symlink":
              command = `mklink /D "${targetPath}" "${source}"`;
              break;
            case "junction":
              command = `mklink /J "${targetPath}" "${source}"`;
              break;
          }
          break;
        default:
          command = `ln -s "${source}" "${targetPath}"`;
          break;
      }
      (0, import_child_process.exec)(command, (error, stdout, stderr) => {
        if (error) {
          if (stderr) {
            console.error(`Error: ${stderr}`);
            new import_obsidian.Notice(`Error: ${stderr}`);
            return;
          }
        } else {
          new import_obsidian.Notice("Symlink created successfully.");
          this.refreshAfterSymlink(targetPath);
        }
      });
    }).open();
  }
  getActivePath() {
    const activeFile = this.app.workspace.getActiveFile();
    let relativePath;
    if (activeFile) {
      const currentPath = activeFile.path;
      relativePath = currentPath.substring(0, currentPath.lastIndexOf("/"));
    } else {
      relativePath = "";
    }
    return relativePath;
  }
  extendActivePath(name) {
    let relativePath = this.getActivePath();
    relativePath = (0, import_obsidian.normalizePath)((0, import_path.join)(relativePath, name));
    const vaultRootPath = this.app.vault.adapter.basePath;
    return (0, import_path.join)(vaultRootPath, relativePath);
  }
  async refreshVault() {
    await this.app.vault.adapter.list("");
  }
  async forceRefresh(path) {
    const folder = this.app.vault.getAbstractFileByPath(path);
    if (folder instanceof import_obsidian.TFolder) {
      this.app.vault.trigger("rename", folder, path);
    }
  }
  async refreshAfterSymlink(path) {
    await new Promise((resolve) => setTimeout(resolve, 100));
    await this.refreshVault();
    await this.forceRefresh(path);
    this.app.vault;
    if (path.split("/").length === 1) {
      await this.forceRefresh("");
    }
  }
};
var SymlinkInputModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.sourcePath = "";
    this.targetPath = "";
    this.linkType = "junction";
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Create Symlink" });
    new import_obsidian.Setting(contentEl).setName("Source Directory").setDesc(
      "This is the folder you want to create a symlink to. The source directory needs to exist."
    ).addButton(
      (button) => button.setButtonText("Choose Folder").setCta().onClick(async () => {
        const { remote } = window.require("electron");
        const selectedPaths = await remote.dialog.showOpenDialog({
          properties: ["openDirectory"]
        });
        if (selectedPaths && selectedPaths.filePaths.length > 0) {
          this.sourcePath = selectedPaths.filePaths[0];
          button.setButtonText((0, import_path.basename)(this.sourcePath));
        }
      })
    );
    new import_obsidian.Setting(contentEl).setName("Target Directory Path").setDesc(
      "This is the path where the symlink will be created. The target directory should not exist and will be newly created."
    ).addText((text) => text.onChange((value) => this.targetPath = value));
    if (os.platform() === "win32") {
      new import_obsidian.Setting(contentEl).setName("Link Type").setDesc("Choose the type of link to create.").addDropdown(
        (dropdown) => dropdown.addOption("junction", "Directory Junction (Default)").addOption("symlink", "Symbolic Link (Across volumes, but needs admin!)").setValue(this.linkType).onChange((value) => {
          this.linkType = value;
        })
      );
    }
    new import_obsidian.Setting(contentEl).addButton(
      (button) => button.setButtonText("Create").setCta().onClick(() => {
        if (this.sourcePath && this.targetPath) {
          this.onSubmit(this.sourcePath, this.targetPath, this.linkType);
          this.close();
        } else {
          new import_obsidian.Notice("Both paths are required.");
        }
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
